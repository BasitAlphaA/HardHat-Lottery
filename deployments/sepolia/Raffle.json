{
  "address": "0xD933539c44bf419e898FEc20A7269f47F871F743",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "subscriptionId",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getcallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getsubscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb231529273f1ab0779c5b8f89c384592d1b517e0efbf1c838522b4bcda16f113",
  "receipt": {
    "to": null,
    "from": "0xB1893194d53081D1E07d7101A6D295cC9b41B0F1",
    "contractAddress": "0xD933539c44bf419e898FEc20A7269f47F871F743",
    "transactionIndex": 56,
    "gasUsed": "1323877",
    "logsBloom": "0x
    "blockHash": "0x62fba40f36a7062e43fb5c9817028a8108d171519e9a9b644f5fcfc7a2736ed7",
    "transactionHash": "0xb231529273f1ab0779c5b8f89c384592d1b517e0efbf1c838522b4bcda16f113",
    "logs": [],
    "blockNumber": 6246418,
    "cumulativeGasUsed": "12819188",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "51656299222045913376376071712528920655945341094321433782584544437730121184589",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 3,
  "solcInputHash": "7985659f213dc85123842a4431d86495",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subscriptionId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getcallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getsubscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Abdul Basit\",\"details\":\"This implements the Chainlink VRF Version 2\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a sample raffle contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\n\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\n/**\\n * @title A sample Raffle Contract\\n * @author Abdul Basit\\n * @notice This contract is for creating a sample raffle contract\\n * @dev This implements the Chainlink VRF Version 2\\n */\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /*Type decleration*/\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATION\\n    }\\n\\n    /*State variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    /* lottery variables */\\n\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    /*events*/\\n    event RaffleEnter(address indexed player);\\n    event RequestRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    /* Functions*/\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        string memory subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_interval = interval;\\n        i_subscriptionId = uint64(parseStringToUint(subscriptionId));\\n        i_entranceFee = entranceFee;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function parseStringToUint(string memory _a) internal pure returns (uint256) {\\n        bytes memory b = bytes(_a);\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                result = result * 10 + (uint8(b[i]) - 48);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function enterRaffle() public payable {\\n        // require(msg.value >= i_entranceFee, \\\"Not enough value sent\\\");\\n        // require(s_raffleState == RaffleState.OPEN, \\\"Raffle is not open\\\");\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__RaffleNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        // Emit an event when we update a dynamic array or mapping\\n        // Named events with the function name reversed\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between raffle runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        // request the random number\\n        // once we get it, do somthing with it\\n        // 2 transaction process\\n        (bool upkeepNeeded, ) = this.checkUpkeep(\\\"\\\");\\n\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATION;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* view / pure functions*/\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public view returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getsubscriptionId() public view returns (uint256) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getcallbackGasLimit() public view returns (uint256) {\\n        return i_callbackGasLimit;\\n    }\\n}\\n\\n// Raffle\\n// enter the lottery (payong some amount)\\n// pick a random winner (verifiably random)\\n// winner to nbe selected every X minutes -> completely automate\\n// ChainLink Orcale -> Randomness , Automate execution ( Chainlink Keeper)\\n\",\"keccak256\":\"0xfd77bc88452b71679882a4c93ee1e9fb6cd2239dcb6c6656ffcd78eed091fba0\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001e2d38038062001e2d833981810160405281019062000038919062000311565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e08181525050826101408181525050620000ca856200014a60201b60201c565b67ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508160a081815250506000600160146101000a81548160ff021916908360018111156200011a576200011962000672565b5b0217905550426002819055508063ffffffff166101208163ffffffff1660e01b815250505050505050506200078c565b6000808290506000805b82518110156200022c576030838281518110620001765762000175620006a1565b5b602001015160f81c60f81b60f81c60ff1610158015620001bd57506039838281518110620001a957620001a8620006a1565b5b602001015160f81c60f81b60f81c60ff1611155b1562000216576030838281518110620001db57620001da620006a1565b5b602001015160f81c60f81b60f81c620001f59190620004e9565b60ff16600a8362000207919062000488565b6200021391906200042b565b91505b80806200022390620005f5565b91505062000154565b508092505050919050565b60006200024e6200024884620003f5565b620003cc565b9050828152602081018484840111156200026d576200026c62000704565b5b6200027a84828562000589565b509392505050565b600081519050620002938162000724565b92915050565b600081519050620002aa816200073e565b92915050565b600082601f830112620002c857620002c7620006ff565b5b8151620002da84826020860162000237565b91505092915050565b600081519050620002f48162000758565b92915050565b6000815190506200030b8162000772565b92915050565b60008060008060008060c087890312156200033157620003306200070e565b5b60006200034189828a0162000282565b965050602087015167ffffffffffffffff81111562000365576200036462000709565b5b6200037389828a01620002b0565b95505060406200038689828a0162000299565b94505060606200039989828a01620002e3565b9350506080620003ac89828a01620002e3565b92505060a0620003bf89828a01620002fa565b9150509295509295509295565b6000620003d8620003eb565b9050620003e68282620005bf565b919050565b6000604051905090565b600067ffffffffffffffff821115620004135762000412620006d0565b5b6200041e8262000713565b9050602081019050919050565b6000620004388262000562565b9150620004458362000562565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200047d576200047c62000643565b5b828201905092915050565b6000620004958262000562565b9150620004a28362000562565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620004de57620004dd62000643565b5b828202905092915050565b6000620004f6826200057c565b915062000503836200057c565b92508282101562000519576200051862000643565b5b828203905092915050565b6000620005318262000542565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b83811015620005a95780820151818401526020810190506200058c565b83811115620005b9576000848401525b50505050565b620005ca8262000713565b810181811067ffffffffffffffff82111715620005ec57620005eb620006d0565b5b80604052505050565b6000620006028262000562565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000638576200063762000643565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200072f8162000524565b81146200073b57600080fd5b50565b620007498162000538565b81146200075557600080fd5b50565b620007638162000562565b81146200076f57600080fd5b50565b6200077d816200056c565b81146200078957600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c6101405161161762000816600039600081816108f20152610962015260008181610795015261098a01526000818161077201526109b8015260006107510152600061071501526000818161037601526104730152600081816103b3015261040701526116176000f3fe6080604052600436106100e85760003560e01c806353a2c19a1161008a57806391ad27b41161005957806391ad27b4146102b45780639862eed0146102df578063b4f8d9f21461030a578063e55ae4e814610335576100e8565b806353a2c19a146101f5578063565429de146102205780635f1b0fd81461024b5780636e04ff0d14610276576100e8565b80632cfcc539116100c65780632cfcc5391461016c578063320229eb146101765780634585e33b146101a1578063473f1ddc146101ca576100e8565b806309bc33a7146100ed578063115cbaf5146101185780631fe543e314610143575b600080fd5b3480156100f957600080fd5b50610102610372565b60405161010f9190611215565b60405180910390f35b34801561012457600080fd5b5061012d61039a565b60405161013a91906111da565b60405180910390f35b34801561014f57600080fd5b5061016a60048036038101906101659190610fab565b6103b1565b005b610174610471565b005b34801561018257600080fd5b5061018b6105e0565b6040516101989190611215565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190610f04565b6105ea565b005b3480156101d657600080fd5b506101df61085d565b6040516101ec9190611113565b60405180910390f35b34801561020157600080fd5b5061020a610887565b6040516102179190611215565b60405180910390f35b34801561022c57600080fd5b50610235610896565b6040516102429190611215565b60405180910390f35b34801561025757600080fd5b506102606108a2565b60405161026d9190611215565b60405180910390f35b34801561028257600080fd5b5061029d60048036038101906102989190610f04565b6108af565b6040516102ab929190611157565b60405180910390f35b3480156102c057600080fd5b506102c961095e565b6040516102d69190611215565b60405180910390f35b3480156102eb57600080fd5b506102f4610986565b6040516103019190611215565b60405180910390f35b34801561031657600080fd5b5061031f6109b4565b60405161032c9190611215565b60405180910390f35b34801561034157600080fd5b5061035c60048036038101906103579190610f51565b6109e6565b6040516103699190611113565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161045a92919061112e565b60405180910390fd5b61046d8282610a2d565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104cb576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104df576104de6114e0565b5b600160149054906101000a900460ff166001811115610501576105006114e0565b5b14610538576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60003073ffffffffffffffffffffffffffffffffffffffff16636e04ff0d6040518163ffffffff1660e01b8152600401610623906111f5565b60006040518083038186803b15801561063b57600080fd5b505afa15801561064f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106789190610ea8565b509050806106e75747600080549050600160149054906101000a900460ff1660018111156106a9576106a86114e0565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106de93929190611230565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561070c5761070b6114e0565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107d6959493929190611187565b602060405180830381600087803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108289190610f7e565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156108d7576108d66114e0565b5b600060018111156108eb576108ea6114e0565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261091f9190611310565b1190506000806000805490501190506000804711905083801561093f5750825b80156109485750815b80156109515750805b9550505050509250929050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b60008082815481106109fb576109fa61150f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610a4857610a4761150f565b5b6020026020010151610a5a9190611451565b90506000808281548110610a7157610a7061150f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610b0557610b046114e0565b5b0217905550600067ffffffffffffffff811115610b2557610b2461153e565b5b604051908082528060200260200182016040528015610b535781602001602082028036833780820191505090505b5060009080519060200190610b69929190610c5e565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b97906110fe565b60006040518083038185875af1925050503d8060008114610bd4576040519150601f19603f3d011682016040523d82523d6000602084013e610bd9565b606091505b5050905080610c14576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cd7579160200282015b82811115610cd65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c7e565b5b509050610ce49190610ce8565b5090565b5b80821115610d01576000816000905550600101610ce9565b5090565b6000610d18610d138461128c565b611267565b90508083825260208201905082856020860282011115610d3b57610d3a611577565b5b60005b85811015610d6b5781610d518882610e7e565b845260208401935060208301925050600181019050610d3e565b5050509392505050565b6000610d88610d83846112b8565b611267565b905082815260208101848484011115610da457610da361157c565b5b610daf8482856113ed565b509392505050565b600082601f830112610dcc57610dcb611572565b5b8135610ddc848260208601610d05565b91505092915050565b600081519050610df4816115b3565b92915050565b60008083601f840112610e1057610e0f611572565b5b8235905067ffffffffffffffff811115610e2d57610e2c61156d565b5b602083019150836001820283011115610e4957610e48611577565b5b9250929050565b600082601f830112610e6557610e64611572565b5b8151610e75848260208601610d75565b91505092915050565b600081359050610e8d816115ca565b92915050565b600081519050610ea2816115ca565b92915050565b60008060408385031215610ebf57610ebe611586565b5b6000610ecd85828601610de5565b925050602083015167ffffffffffffffff811115610eee57610eed611581565b5b610efa85828601610e50565b9150509250929050565b60008060208385031215610f1b57610f1a611586565b5b600083013567ffffffffffffffff811115610f3957610f38611581565b5b610f4585828601610dfa565b92509250509250929050565b600060208284031215610f6757610f66611586565b5b6000610f7584828501610e7e565b91505092915050565b600060208284031215610f9457610f93611586565b5b6000610fa284828501610e93565b91505092915050565b60008060408385031215610fc257610fc1611586565b5b6000610fd085828601610e7e565b925050602083013567ffffffffffffffff811115610ff157610ff0611581565b5b610ffd85828601610db7565b9150509250929050565b61101081611344565b82525050565b61101f81611356565b82525050565b61102e81611362565b82525050565b600061103f826112e9565b61104981856112f4565b93506110598185602086016113ed565b6110628161158b565b840191505092915050565b611076816113db565b82525050565b60006110896000836112f4565b91506110948261159c565b600082019050919050565b60006110ac600083611305565b91506110b78261159c565b600082019050919050565b6110cb8161137f565b82525050565b6110da816113ad565b82525050565b6110e9816113b7565b82525050565b6110f8816113c7565b82525050565b60006111098261109f565b9150819050919050565b60006020820190506111286000830184611007565b92915050565b60006040820190506111436000830185611007565b6111506020830184611007565b9392505050565b600060408201905061116c6000830185611016565b818103602083015261117e8184611034565b90509392505050565b600060a08201905061119c6000830188611025565b6111a960208301876110ef565b6111b660408301866110c2565b6111c360608301856110e0565b6111d060808301846110e0565b9695505050505050565b60006020820190506111ef600083018461106d565b92915050565b6000602082019050818103600083015261120e8161107c565b9050919050565b600060208201905061122a60008301846110d1565b92915050565b600060608201905061124560008301866110d1565b61125260208301856110d1565b61125f60408301846110d1565b949350505050565b6000611271611282565b905061127d8282611420565b919050565b6000604051905090565b600067ffffffffffffffff8211156112a7576112a661153e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112d3576112d261153e565b5b6112dc8261158b565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061131b826113ad565b9150611326836113ad565b92508282101561133957611338611482565b5b828203905092915050565b600061134f8261138d565b9050919050565b60008115159050919050565b6000819050919050565b600081905061137a8261159f565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113e68261136c565b9050919050565b60005b8381101561140b5780820151818401526020810190506113f0565b8381111561141a576000848401525b50505050565b6114298261158b565b810181811067ffffffffffffffff821117156114485761144761153e565b5b80604052505050565b600061145c826113ad565b9150611467836113ad565b925082611477576114766114b1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115b0576115af6114e0565b5b50565b6115bc81611356565b81146115c757600080fd5b50565b6115d3816113ad565b81146115de57600080fd5b5056fea264697066735822122064b56fa66b0ddf60e2e0c79eddf78c94e1e1236f36fefff231eea00774d7738564736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c806353a2c19a1161008a57806391ad27b41161005957806391ad27b4146102b45780639862eed0146102df578063b4f8d9f21461030a578063e55ae4e814610335576100e8565b806353a2c19a146101f5578063565429de146102205780635f1b0fd81461024b5780636e04ff0d14610276576100e8565b80632cfcc539116100c65780632cfcc5391461016c578063320229eb146101765780634585e33b146101a1578063473f1ddc146101ca576100e8565b806309bc33a7146100ed578063115cbaf5146101185780631fe543e314610143575b600080fd5b3480156100f957600080fd5b50610102610372565b60405161010f9190611215565b60405180910390f35b34801561012457600080fd5b5061012d61039a565b60405161013a91906111da565b60405180910390f35b34801561014f57600080fd5b5061016a60048036038101906101659190610fab565b6103b1565b005b610174610471565b005b34801561018257600080fd5b5061018b6105e0565b6040516101989190611215565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190610f04565b6105ea565b005b3480156101d657600080fd5b506101df61085d565b6040516101ec9190611113565b60405180910390f35b34801561020157600080fd5b5061020a610887565b6040516102179190611215565b60405180910390f35b34801561022c57600080fd5b50610235610896565b6040516102429190611215565b60405180910390f35b34801561025757600080fd5b506102606108a2565b60405161026d9190611215565b60405180910390f35b34801561028257600080fd5b5061029d60048036038101906102989190610f04565b6108af565b6040516102ab929190611157565b60405180910390f35b3480156102c057600080fd5b506102c961095e565b6040516102d69190611215565b60405180910390f35b3480156102eb57600080fd5b506102f4610986565b6040516103019190611215565b60405180910390f35b34801561031657600080fd5b5061031f6109b4565b60405161032c9190611215565b60405180910390f35b34801561034157600080fd5b5061035c60048036038101906103579190610f51565b6109e6565b6040516103699190611113565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161045a92919061112e565b60405180910390fd5b61046d8282610a2d565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104cb576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104df576104de6114e0565b5b600160149054906101000a900460ff166001811115610501576105006114e0565b5b14610538576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60003073ffffffffffffffffffffffffffffffffffffffff16636e04ff0d6040518163ffffffff1660e01b8152600401610623906111f5565b60006040518083038186803b15801561063b57600080fd5b505afa15801561064f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106789190610ea8565b509050806106e75747600080549050600160149054906101000a900460ff1660018111156106a9576106a86114e0565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106de93929190611230565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561070c5761070b6114e0565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107d6959493929190611187565b602060405180830381600087803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108289190610f7e565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156108d7576108d66114e0565b5b600060018111156108eb576108ea6114e0565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261091f9190611310565b1190506000806000805490501190506000804711905083801561093f5750825b80156109485750815b80156109515750805b9550505050509250929050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b60008082815481106109fb576109fa61150f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610a4857610a4761150f565b5b6020026020010151610a5a9190611451565b90506000808281548110610a7157610a7061150f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610b0557610b046114e0565b5b0217905550600067ffffffffffffffff811115610b2557610b2461153e565b5b604051908082528060200260200182016040528015610b535781602001602082028036833780820191505090505b5060009080519060200190610b69929190610c5e565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b97906110fe565b60006040518083038185875af1925050503d8060008114610bd4576040519150601f19603f3d011682016040523d82523d6000602084013e610bd9565b606091505b5050905080610c14576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cd7579160200282015b82811115610cd65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c7e565b5b509050610ce49190610ce8565b5090565b5b80821115610d01576000816000905550600101610ce9565b5090565b6000610d18610d138461128c565b611267565b90508083825260208201905082856020860282011115610d3b57610d3a611577565b5b60005b85811015610d6b5781610d518882610e7e565b845260208401935060208301925050600181019050610d3e565b5050509392505050565b6000610d88610d83846112b8565b611267565b905082815260208101848484011115610da457610da361157c565b5b610daf8482856113ed565b509392505050565b600082601f830112610dcc57610dcb611572565b5b8135610ddc848260208601610d05565b91505092915050565b600081519050610df4816115b3565b92915050565b60008083601f840112610e1057610e0f611572565b5b8235905067ffffffffffffffff811115610e2d57610e2c61156d565b5b602083019150836001820283011115610e4957610e48611577565b5b9250929050565b600082601f830112610e6557610e64611572565b5b8151610e75848260208601610d75565b91505092915050565b600081359050610e8d816115ca565b92915050565b600081519050610ea2816115ca565b92915050565b60008060408385031215610ebf57610ebe611586565b5b6000610ecd85828601610de5565b925050602083015167ffffffffffffffff811115610eee57610eed611581565b5b610efa85828601610e50565b9150509250929050565b60008060208385031215610f1b57610f1a611586565b5b600083013567ffffffffffffffff811115610f3957610f38611581565b5b610f4585828601610dfa565b92509250509250929050565b600060208284031215610f6757610f66611586565b5b6000610f7584828501610e7e565b91505092915050565b600060208284031215610f9457610f93611586565b5b6000610fa284828501610e93565b91505092915050565b60008060408385031215610fc257610fc1611586565b5b6000610fd085828601610e7e565b925050602083013567ffffffffffffffff811115610ff157610ff0611581565b5b610ffd85828601610db7565b9150509250929050565b61101081611344565b82525050565b61101f81611356565b82525050565b61102e81611362565b82525050565b600061103f826112e9565b61104981856112f4565b93506110598185602086016113ed565b6110628161158b565b840191505092915050565b611076816113db565b82525050565b60006110896000836112f4565b91506110948261159c565b600082019050919050565b60006110ac600083611305565b91506110b78261159c565b600082019050919050565b6110cb8161137f565b82525050565b6110da816113ad565b82525050565b6110e9816113b7565b82525050565b6110f8816113c7565b82525050565b60006111098261109f565b9150819050919050565b60006020820190506111286000830184611007565b92915050565b60006040820190506111436000830185611007565b6111506020830184611007565b9392505050565b600060408201905061116c6000830185611016565b818103602083015261117e8184611034565b90509392505050565b600060a08201905061119c6000830188611025565b6111a960208301876110ef565b6111b660408301866110c2565b6111c360608301856110e0565b6111d060808301846110e0565b9695505050505050565b60006020820190506111ef600083018461106d565b92915050565b6000602082019050818103600083015261120e8161107c565b9050919050565b600060208201905061122a60008301846110d1565b92915050565b600060608201905061124560008301866110d1565b61125260208301856110d1565b61125f60408301846110d1565b949350505050565b6000611271611282565b905061127d8282611420565b919050565b6000604051905090565b600067ffffffffffffffff8211156112a7576112a661153e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112d3576112d261153e565b5b6112dc8261158b565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061131b826113ad565b9150611326836113ad565b92508282101561133957611338611482565b5b828203905092915050565b600061134f8261138d565b9050919050565b60008115159050919050565b6000819050919050565b600081905061137a8261159f565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113e68261136c565b9050919050565b60005b8381101561140b5780820151818401526020810190506113f0565b8381111561141a576000848401525b50505050565b6114298261158b565b810181811067ffffffffffffffff821117156114485761144761153e565b5b80604052505050565b600061145c826113ad565b9150611467836113ad565b925082611477576114766114b1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115b0576115af6114e0565b5b50565b6115bc81611356565b81146115c757600080fd5b50565b6115d3816113ad565b81146115de57600080fd5b5056fea264697066735822122064b56fa66b0ddf60e2e0c79eddf78c94e1e1236f36fefff231eea00774d7738564736f6c63430008070033",
  "devdoc": {
    "author": "Abdul Basit",
    "details": "This implements the Chainlink VRF Version 2",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      }
    },
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a sample raffle contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 206,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 223,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 226,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)201"
      },
      {
        "astId": 228,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)201": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}